{
	"name": "TRI_ADF_TEST",
	"properties": {
		"description": "Run query at Snowflake at once",
		"activities": [
			{
				"name": "DIM_BRAND_MARKET_SHARE",
				"type": "DatabricksNotebook",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('DIM_BRAND_MARKET_SHARE')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"use_case": {
				"type": "string",
				"defaultValue": "dss-sfe"
			},
			"schema": {
				"type": "string",
				"defaultValue": "CORE"
			}
		},
		"variables": {
			"rsa_private_key": {
				"type": "String",
				"defaultValue": "sf_private.key"
			},
			"db_credential": {
				"type": "String",
				"defaultValue": "sf_credential.json"
			},
			"DIM_EXAMPLE": {
				"type": "String",
				"defaultValue": " -------------------------------------------------------------------------------- --               LOADING PROCESS LKA RETAILER TS DATAMART   -------------------------------------------------------------------------------- -- Stitching Rule: -- Load only when SALES_INPCS is not empty or zero -- If column sellout_pcs is empty or zero then reject the data before loading  MERGE INTO \tSANDBOX.TEST_R_TS dest \t\tUSING ( --============================================================================= --      SELECTION PROCESS FROM TABLE LKA_SELLOUT_STOCK FOR TS TABLE --============================================================================= WITH  -------------------- SET CTE FOR TEMPORARY TABLE -------------------- CTE1(PERIOD, PROCESS_DATE, BARCODE, ACCOUNTGRUP, STORENAME, STORECODE, AREACODE) AS  ( -------------------- HOLD DATA FROM ORIGINAL LKA TABLE -------------------- SELECT \tCASE          WHEN LOWER(VALUE:periode::STRING) = 'NaT' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:periode::STRING) = 'nan' THEN 0::NUMBER(38,0)         WHEN SPLIT_PART(value:periode::VARCHAR, ' ', 1) NOT LIKE '202%' THEN 0::NUMBER(38,0)         ELSE TO_NUMBER(TO_VARCHAR(CAST((VALUE:periode::VARCHAR) AS DATE),'YYYYMMDD'))     END PERIOD,     MAX(TO_NUMBER(VALUE:process_date::VARCHAR)) AS PROCESS_DATE, \tCASE \t\tWHEN LOWER(VALUE:barcode::STRING) = 'no barcode' THEN 0::NUMBER(38,0) \t\tWHEN LOWER(VALUE:barcode::STRING) = 'nan' THEN 0::NUMBER(38,0) \t\tELSE VALUE:barcode::NUMBER(38,0) \tEND BARCODE, \tVALUE:account_grup::VARCHAR ACCOUNTGRUP, \tVALUE:storename::VARCHAR STORENAME,     VALUE:storecode::VARCHAR STORECODE, \tVALUE:areacode::VARCHAR AREACODE FROM \tIDN_STG_TSM.S_LKA_LKA_SELLOUT_STOCK WHERE \tPERIOD > 0 AND BARCODE  > 0 \tAND PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM IDN_STG_TSM.S_LKA_LKA_SELLOUT_STOCK) -- select latest data     AND (VALUE:process_datetime::STRING != 'NaT' OR VALUE:process_datetime::STRING != 'nan') GROUP BY   -- TO GET COMBINE KEY BECAUSE THERE IS NO KEY COLUMN IN THIS TABLE \tPERIOD, BARCODE, ACCOUNTGRUP, STORENAME, STORECODE, AREACODE ORDER BY PROCESS_DATE  ), -- 264,526 rows; WITH MAX PAR_DAT 259,149 rows ----------- END OF CTE1 ---------------  ---- TEMPORARY TABLE FOR HOLDING THE RESULT FROM JOIN MAPPING TABLE ------ CTE2(PERIOD, PROCESS_DATE, BARCODE, ACCOUNTGRUP, STORENAME, STORECODE, AREACODE,      PRODUCT_KEY, CUSTOMER_DISTRIBUTOR_KEY, \t AREA_KEY,       SKUCD, SOURCE_SYSTEM_CODE,      ORIGINAL_CODE,      CUSTOMER_DISTRIBUTOR_CODE     ) AS (  -------------------- TAKING THE RESULT FROM CTE1 --------------------   SELECT T1.*, \tT4.PRODUCT_KEY, \tTS1.CUSTOMER_DISTRIBUTOR_KEY, \tTT1.AREA_KEY,     T3.SKUCD, T4.SOURCE_SYSTEM_CODE,     TT1.ORIGINAL_CODE,     T2.CUSTOMER_DISTRIBUTOR_CODE   FROM CTE1 T1     -------------------- TAKING COLUMN PRODUCT_KEY --------------------  ---------- 1. JOIN TO TABLE DIM_CUSTOMER_DISTRIBUTOR -----------  LEFT JOIN (SELECT SUB_ACC_COD AS SUB_ACCOUNT_CODE, CUS_DIS_NAM AS CUSTOMER_DISTRIBUTOR_NAME, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE,              SUB_ACC_DES AS ACCOUNTGRUP              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD              WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999'             ) T2   ON LOWER(CONCAT(T2.SUB_ACCOUNT_CODE, '-',T1.STORECODE)) = LOWER(T2.CUSTOMER_DISTRIBUTOR_CODE)      -------------------- TAKING COLUMN PRODUCT_KEY --------------------  -------------- 2. JOIN TO TABLE MAPPINGPRODUCT ------------------- INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD, DIS AS DISTRIBUTORCD             FROM IDN_DWH.R_BTZ_MLK_MPD             WHERE DIS = '99999999') T3  ON LOWER(CONCAT(T2.SUB_ACCOUNT_CODE, '-', T1.BARCODE)) = LOWER(T3.MATERIALCD)      -------------------- TAKING COLUMN PRODUCT_KEY --------------------  -------------- 3. JOIN TO DIM_PRODUCT, GET PRODUCT_KEY ------------------- INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD             WHERE SOU_SYS_COD = 6) T4  ON T3.SKUCD = T4.PRODUCT_CODE     ---------- TAKING COLUMN CUSTOMER_DISTRIBUTOR_KEY ------------------  --------- 1. JOIN TO TABLE DIM_CUSTOMER_DISTRIBUTOR ------------------- INNER JOIN (SELECT CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE, CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD             WHERE SOU_SYS_COD = 6) TS1   ON LOWER(T2.CUSTOMER_DISTRIBUTOR_CODE) = LOWER(TS1.CUSTOMER_DISTRIBUTOR_CODE)     ---------- TAKING COLUMN AREA_KEY ------------------  --------- 1. JOIN TO TABLE DIM_AREA -------------------  LEFT JOIN (SELECT ARE_KEY AS AREA_KEY, ORI_COD AS ORIGINAL_CODE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE             WHERE SOU_SYS_COD = 6) TT1  ON LOWER(CONCAT(T3.DISTRIBUTORCD, '-', T2.SUB_ACCOUNT_CODE, '-', T1.AREACODE)) = LOWER(TT1.ORIGINAL_CODE)   ), ----------- END OF CTE2 ---------------  -------- TEMPORARY TABLE TO GET THE LATEST RBP COMPARE WITH PERIOD ----------- CTE3(PERIOD, PROCESS_DATE, BARCODE, ACCOUNTGRUP, STORENAME, STORECODE, AREACODE,      PRODUCT_KEY, CUSTOMER_DISTRIBUTOR_KEY, \t AREA_KEY,       SKUCD, SOURCE_SYSTEM_CODE,      ORIGINAL_CODE,      CUSTOMER_DISTRIBUTOR_CODE,       RBP, ORDER_DATE) AS ( SELECT T1.*, T2.RBP, T2.ORDER_DATE FROM CTE2 T1  LEFT JOIN (      select A.SKU AS SKUCD, A.RBP,              TO_NUMBER(CASE WHEN A.NMO::INTEGER < 10                             THEN (A.NYE::STRING || '0' || A.NMO::STRING)                        ELSE A.NYE::STRING || A.NMO::STRING END) AS ORDER_DATE         FROM IDN_DWH.R_BTZ_PUR_PRC A,                (SELECT B.SKU, MAX(CASE WHEN B.NMO::INTEGER < 10 THEN (B.NYE::STRING || '0' || B.NMO::STRING)                                     ELSE B.NYE::STRING || B.NMO::STRING END) as MAX_DATE                     FROM IDN_DWH.R_BTZ_PUR_PRC B                     WHERE B.DIS = '99999999' AND B.SKU != ''                     GROUP BY SKU) B          WHERE A.SKU = B.SKU          AND ORDER_DATE = B.MAX_DATE AND A.DIS = '99999999' AND A.SKU != '' -- 786 rows      ) T2  ON T1.SKUCD = T2.SKUCD  WHERE TO_NUMBER(T2.ORDER_DATE) <= TO_NUMBER(LEFT(T1.PERIOD, 6)) )  ----------- END OF CTE3 ---------------  -------------------- MAIN SELECTION OF COLUMNS -------------------- SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,            5 AS TYP_KEY,           1493 AS DIS_KEY,            T.SELLOUT_PCS AS SAL_INP_PCS,             (T.SELLOUT_PCS/TC1.INPCS)*TC1.INCAR AS SAL_INC_CAR,             (T.SELLOUT_PCS/TC1.INPCS)*TC1.INKG AS SAL_INK_INK,            (T.SELLOUT_PCS/TC1.INPCS)*TC1.INTON AS SAL_INT_TON,            (T.SELLOUT_PCS/TC1.INPCS)*TC1.IN400GR AS SAL_IN4_400,            ((T.SELLOUT_PCS/TC1.INPCS)*TC1.INCAR)*T2.RBP AS SAL_INV_VAL,            T.SELLOUT_RP AS SAL_INR_REA_VAL,             T2.RBP AS PRI_RBP,             T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,             UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT, CREATE_TIMESTAMP AS CRE_TIM, UPDATE_TIMESTAMP AS UPD_TIM, PROCESS_DATETIME AS PRO_ATE      FROM CTE2 T1       -------------------- JOIN WITH THE TEMPORARY TABLE CTE3 -------------------- --  Join with CTE3 to get the latest RBP LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.PERIOD = T2.PERIOD AND T1.BARCODE = T2.BARCODE AND T1.ACCOUNTGRUP = T2.ACCOUNTGRUP AND T1.STORENAME = T2.STORENAME    AND T1.PRODUCT_KEY = T2.PRODUCT_KEY AND T1.CUSTOMER_DISTRIBUTOR_KEY = T2.CUSTOMER_DISTRIBUTOR_KEY    AND T1.AREA_KEY = T2.AREA_KEY AND T1.SKUCD = T2.SKUCD     -------------------- JOIN BACK TO THE ORIGINAL LKA TABLE -------------------- -- Get SELLOUT_PCS & SELLOUT_RP LEFT JOIN( \tSELECT         CASE              WHEN LOWER(VALUE:periode::STRING) = 'NaT' THEN 0::NUMBER(38,0) \t\t\tWHEN LOWER(VALUE:periode::STRING) = 'nan' THEN 0::NUMBER(38,0)             WHEN SPLIT_PART(value:periode::VARCHAR, ' ', 1) NOT LIKE '202%' THEN 0::NUMBER(38,0) \t\t\tELSE TO_NUMBER(TO_VARCHAR(CAST((VALUE:periode::VARCHAR) AS DATE),'YYYYMMDD')) \t\tEND PERIOD, \t\tCASE \t\t\tWHEN LOWER(VALUE:barcode::STRING) = 'no barcode' THEN 0::NUMBER(38,0) \t\t\tWHEN LOWER(VALUE:barcode::STRING) = 'nan' THEN 0::NUMBER(38,0) \t\t\tELSE VALUE:barcode::NUMBER(38,0) \t\tEND BARCODE, \t\tVALUE:account_grup::VARCHAR ACCOUNTGRUP, \t\tVALUE:storename::VARCHAR STORENAME, \t\tVALUE:areacode::VARCHAR AREACODE, \t\tCASE \t\t\tWHEN LOWER(VALUE:sellout_pcs::STRING) = '-' THEN 0::NUMBER(38,0) \t\t\tWHEN LOWER(VALUE:sellout_pcs::STRING) = 'nan' THEN 0::NUMBER(38,0) \t\t\tELSE VALUE:sellout_pcs::NUMBER(38,0) \t\tEND SELLOUT_PCS, \t\tCASE \t\t\tWHEN LOWER(VALUE:value_sell_out_rp::STRING) = '-' THEN 0::NUMBER(38,8) \t\t\tWHEN LOWER(VALUE:value_sell_out_rp::STRING) = 'nan' THEN 0::NUMBER(38,8) \t\t\tELSE VALUE:value_sell_out_rp::NUMBER(38,8) \t\tEND SELLOUT_RP,          CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \t\tCAST($1:process_date AS VARCHAR) PROCESS_DATE2, \t\tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \t\tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \t\tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME \tFROM \t\tIDN_STG_TSM.S_LKA_LKA_SELLOUT_STOCK   WHERE BARCODE > 0 AND PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM IDN_STG_TSM.S_LKA_LKA_SELLOUT_STOCK)         AND PERIOD > 0         AND (VALUE:process_datetime::STRING != 'NaT' OR VALUE:process_datetime::STRING != 'nan')     ORDER BY PROCESS_DATE2     ) T  ON T1.PERIOD = T.PERIOD AND T1.BARCODE = T.BARCODE AND T1.ACCOUNTGRUP = T.ACCOUNTGRUP AND T1.STORENAME = T.STORENAME  -------------------- JOIN WITH TABLE UOMCONVERSION  -------------------- -- Do calculation for sellot_pcs & sellout_rp based on UOMConversion LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4 AS IN400GR, INC AS INCAR, INK AS INKG, INP AS INPCS, INT AS INTON \tFROM DEV_IDN.IDN_DMT_SFE.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD  WHERE T.SELLOUT_PCS != 0 --ORDER BY T1.PROCESS_DATE DESC -- FINAL RESULT:  \t\t\t\t-- 260,091 rows, initial selection \t\t\t\t-- 203,913 rows, after removing qty=0 \t\t\t\t-- 203,092 rows, after adding \"qualify row\" to select top 1 of duplicate values --=====================END OF SELECTION==============================================   --=====================QUERY FOR UPSERT==============================================  ------ USE QUALIFY ROW_NUMBER() TO SELECT TOP 1 IF THERE IS A DUPLICATE ROW ------- --WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM STAGING.RAW_FACT_STOCK_RETAILER) QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_DAT DESC) = 1   -------------------------- START UPSERT QUERY FOR STITCHING -------------------------------  ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN MATCHED THEN UPDATE SET dest.PER_KEY = source.PER_KEY, dest.PRO_KEY = source.PRO_KEY, dest.CUS_DIS_KEY = source.CUS_DIS_KEY, dest.ARE_KEY = source.ARE_KEY, dest.TYP_KEY = source.TYP_KEY, dest.DIS_KEY = source.DIS_KEY, dest.SAL_INP_PCS = source.SAL_INP_PCS, dest.SAL_INC_CAR = source.SAL_INC_CAR, dest.SAL_INK_INK = source.SAL_INK_INK, dest.SAL_INT_TON = source.SAL_INT_TON, dest.SAL_IN4_400 = source.SAL_IN4_400, dest.SAL_INV_VAL = source.SAL_INV_VAL, dest.SAL_INR_REA_VAL = source.SAL_INR_REA_VAL, dest.PRI_RBP = source.PRI_RBP, dest.SOU_SYS_COD = source.SOU_SYS_COD, dest.UPL_DAT = source.UPL_DAT, dest.PRO_DAT = source.PRO_DAT, dest.CRE_TIM = source.CRE_TIM, dest.UPD_TIM = source.UPD_TIM, dest.PRO_ATE = source.PRO_ATE WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			}
		},
		"annotations": [
			"SFE",
			"CORE"
		],
		"lastPublishTime": "2021-12-04T22:31:08Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}