{
	"name": "Datamart_TS_ECO",
	"properties": {
		"description": "Run query in Snowflake at once. Job running based on query to load e-commerce data from manual upload data.",
		"activities": [
			{
				"name": "ALFACART_F_BTZ_SND_TTS",
				"type": "DatabricksNotebook",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('ALFACART_F_BTZ_SND_TTS')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "FLAGSHIP_F_BTZ_SND_TTS",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "ALFACART_F_BTZ_SND_TTS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('FLAGSHIP_F_BTZ_SND_TTS')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "TIPTOP_F_BTZ_SND_TTS",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "FLAGSHIP_F_BTZ_SND_TTS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('TIPTOP_F_BTZ_SND_TTS')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "KLIKIDM_F_BTZ_SND_TTS",
				"type": "DatabricksNotebook",
				"dependsOn": [
					{
						"activity": "TIPTOP_F_BTZ_SND_TTS",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('KLIKIDM_F_BTZ_SND_TTS')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"use_case": {
				"type": "string",
				"defaultValue": "dss-sfe"
			},
			"schema": {
				"type": "string",
				"defaultValue": "IDN_DMT_SFE"
			}
		},
		"variables": {
			"rsa_private_key": {
				"type": "String",
				"defaultValue": "sf_private.key"
			},
			"db_credential": {
				"type": "String",
				"defaultValue": "sf_credential.json"
			},
			"ALFACART_F_BTZ_SND_TTS": {
				"type": "String",
				"defaultValue": "MERGE INTO \tDEV_IDN.IDN_DMT_SFE.F_BTZ_SND_TTS dest  \t\tUSING (  WITH  CTE1(NYEAR, NMON, NMONTH, EOM, PERIOD,  PRODUCT_ID, APPLICATION, BRANCH_NAME, QTY, GMV,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS ( SELECT      VALUE:year::number(38,0) NYEAR, VALUE:month_order::number(38,0) NMON,     iff(len(value:month_order::string) = 1,concat('0',value:month_order::string),value:month_order::string) as NMONTH,      LAST_DAY(TO_DATE(concat(nyear, nmonth, '01'), 'YYYYMMDD')) AS EOM,     TO_NUMBER(TO_VARCHAR(CAST((LAST_DAY(TO_DATE(concat(nyear, nmonth, '01'), 'YYYYMMDD'))) AS DATE),'YYYYMMDD')) AS PERIOD,     CASE          WHEN LOWER(VALUE:product_id::STRING) = 'nat' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:product_id::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:product_id::NUMBER(38,0)     END product_id,     VALUE:application::varchar APPLICATION,     VALUE:branch_name::varchar BRANCH_NAME,     CASE         WHEN LOWER(VALUE:qty::STRING) = '' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:qty::STRING) = '-' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:qty::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:qty::NUMBER(38,0)     END qty,      CASE          WHEN TRIM(UPPER(VALUE:gmv::STRING)) = '-' THEN 0::NUMBER(38,8)          WHEN LOWER(VALUE:gmv::STRING) = '' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:gmv::STRING) = 'nan' THEN 0::NUMBER(38,8)         ELSE TO_NUMBER(REPLACE(VALUE:gmv::STRING, ',', ''), 38, 8)     END gmv,     CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \tCAST($1:process_date AS VARCHAR) PROCESS_DATE, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME,     PARTITION_DATE from DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_ALFACART_SELLOUT WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_ALFACART_SELLOUT)         AND product_id > 0 AND PERIOD > 0        AND LOWER(VALUE:order_date::STRING) != 'nat' AND LOWER(VALUE:order_date::STRING) != 'nan' ),   CTE_X( NYEAR, NMON, NMONTH, EOM, PERIOD, PRODUCT_ID, APPLICATION, BRANCH_NAME, QTY, GMV,         SKUCD, MATERIALCD,         PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,       app2, SUB_ACCOUNT_DESC,      CUSTOMER_DISTRIBUTOR_CODE,        DISTRIBUTORCUSTOMERCD, DISTRIBUTORCD,      CUSTOMER_DISTRIBUTOR_KEY,        DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,         UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS (SELECT T1.NYEAR, T1.NMON, T1.NMONTH, T1.EOM, T1.PERIOD, T1.PRODUCT_ID, T1.APPLICATION, T1.BRANCH_NAME, T1.QTY, T1.GMV,                T2.SKUCD, T2.MATERIALCD,                T3.PRODUCT_CODE, T3.PRODUCT_KEY,T3.SOURCE_SYSTEM_CODE,               T4.APPLICATION as app2, T4.SUB_ACCOUNT_DESC,             T4.CUSTOMER_DISTRIBUTOR_CODE,              T5.DISTRIBUTORCUSTOMERCD, T5.DISTRIBUTORCD,             T6.CUSTOMER_DISTRIBUTOR_KEY,              T9.DISTRIBUTOR_ID, T9.DISTRIBUTOR_KEY,             T8.AREA_KEY,               T1.UPLOAD_DATE, T1.PROCESS_DATE, T1.CREATE_TIMESTAMP,              T1.UPDATE_TIMESTAMP, T1.PROCESS_DATETIME, T1.PARTITION_DATE     FROM CTE1 T1     INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_MLK_MPD                WHERE SKU != ''               ) T2      ON LOWER(TRIM(CONCAT('ALFACART-', T1.PRODUCT_ID))) = LOWER(TRIM(T2.MATERIALCD))     INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE                  FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD                  WHERE SOU_SYS_COD = 6) T3     ON T2.SKUCD = T3.PRODUCT_CODE       LEFT JOIN (SELECT APP AS APPLICATION, SUB_ACC_DES AS SUB_ACCOUNT_DESC, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE                 FROM DEV_IDN.IDN_DMT_SFE.R_ECO_MAP_MCA) T4     ON UPPER(TRIM(T1.APPLICATION)) = UPPER(TRIM(T4.APPLICATION))          INNER JOIN (SELECT IST AS DISTRIBUTORCUSTOMERCD, DIS AS DISTRIBUTORCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_CUS_MCD                 WHERE DIS IS NOT NULL ) T5     ON LOWER(CONCAT(TRIM(T4.SUB_ACCOUNT_DESC), '-', TRIM(T4.CUSTOMER_DISTRIBUTOR_CODE))) = LOWER(T5.DISTRIBUTORCUSTOMERCD)           INNER JOIN (SELECT CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE                FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD                 WHERE SOU_SYS_COD = 6) T6     ON LOWER(TRIM(T5.DISTRIBUTORCUSTOMERCD)) = LOWER(TRIM(T6.CUSTOMER_DISTRIBUTOR_CODE))              LEFT JOIN (SELECT BRA_NAM AS BRANCH_NAME, PAT_BRA_NAM AS PATCH_BRANCH_NAME                 FROM DEV_IDN.IDN_DMT_SFE.R_ECO_MAP_MAA) T7     ON LOWER(TRIM(T1.BRANCH_NAME)) = LOWER(TRIM(T7.BRANCH_NAME))          INNER JOIN (SELECT ORI_COD AS ORIGINAL_CODE, ARE_KEY AS AREA_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE                  WHERE SOU_SYS_COD = 6) T8     ON UPPER(CONCAT('99999999-ALFACART-ALFACART-', T7.PATCH_BRANCH_NAME)) = UPPER(T8.ORIGINAL_CODE)          INNER JOIN (SELECT TO_VARCHAR(DIS_DIS) AS DISTRIBUTOR_ID, DIS_KEY AS DISTRIBUTOR_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_DIS                  WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999'                ) T9     ON TO_VARCHAR(T5.DISTRIBUTORCD) = TO_VARCHAR(T9.DISTRIBUTOR_ID)          ),       CTE2(PERIOD, QTY, GMV,       SKUCD,       PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_CODE,       DISTRIBUTORCUSTOMERCD, DISTRIBUTORCD,      CUSTOMER_DISTRIBUTOR_KEY,       DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,        UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE)      AS (SELECT PERIOD, SUM(QTY) AS QTY, SUM(GMV) AS GMV,                  SKUCD, PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      \t\t\tCUSTOMER_DISTRIBUTOR_CODE,        \t\t\tDISTRIBUTORCUSTOMERCD, DISTRIBUTORCD, \t\t\t    CUSTOMER_DISTRIBUTOR_KEY,  \t\t\t    DISTRIBUTOR_ID, DISTRIBUTOR_KEY, \t\t\t    AREA_KEY,                 UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE           FROM CTE_X T1          GROUP BY 1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20      ),         CTE3(PERIOD, SKUCD, ORDER_DATE) AS ( SELECT T1.PERIOD, T1.SKUCD, MAX(T2.ORDER_DATE) AS MAX_DATE FROM CTE2 T1   LEFT JOIN (SELECT SKU AS SKUCD, NMO AS NMONTH, NYE AS NYEAR,               TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                              ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC              WHERE SKU != '') T2   ON T1.SKUCD = T2.SKUCD AND TO_NUMBER(LEFT(T1.PERIOD, 6)) >= ORDER_DATE GROUP BY T1.PERIOD, T1.SKUCD )  SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,  \t\t5 AS TYP_KEY, T1.DISTRIBUTOR_KEY AS DIS_KEY,          T1.QTY AS SAL_INP_PCS,         (T1.QTY / TC1.INPCS) * TC1.INCAR AS SAL_INC_CAR,         (T1.QTY / TC1.INPCS) * TC1.INKG AS SAL_INK_INK,         (T1.QTY / TC1.INPCS) * TC1.INTON AS SAL_INT_TON,         (T1.QTY / TC1.INPCS) * TC1.IN400GR AS SAL_IN4_400,         (T1.QTY / TC1.INPCS) * TC1.INCAR * T3.RBP AS SAL_INV_VAL,         T1.GMV AS SAL_INR_REA_VAL,         T3.RBP AS PRI_RBP,         T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,         T1.UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT,          T1.CREATE_TIMESTAMP AS CRE_TIM, T1.UPDATE_TIMESTAMP AS UPD_TIM, T1.PROCESS_DATETIME AS PRO_ATE FROM CTE2 T1  LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.SKUCD = T2.SKUCD LEFT JOIN (SELECT SKU AS SKUCD, TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                                            ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE,            RBP            FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC            WHERE SKU != '') T3 ON T1.SKUCD = T3.SKUCD AND T2.ORDER_DATE = T3.ORDER_DATE  LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4_400 AS IN400GR, INC_CAR AS INCAR, INK_INK AS INKG, INP_PCS AS INPCS, INT_TON AS INTON \tFROM DEV_IDN.IDN_DMT_SFE.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD   QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_ATE DESC) = 1   ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			},
			"FLAGSHIP_F_BTZ_SND_TTS": {
				"type": "String",
				"defaultValue": "MERGE INTO \tDEV_IDN.IDN_DMT_SFE.F_BTZ_SND_TTS dest  \t\tUSING ( WITH  CTE1(NYEAR, No_MONth, NMONTH, PERIOD, kode_product_account, account_ori_name, BRANCH_NAME, QTY, val,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS ( SELECT      VALUE:year::number(38,0) NYEAR,     month(to_date(value:month::varchar, 'Mon')) no_month,     iff(len(to_varchar(no_month)) = 1,concat('0',to_varchar(no_month)),to_varchar(no_month)) as NMONTH,     TO_NUMBER(TO_VARCHAR(CAST((LAST_DAY(TO_DATE(concat(nyear, nmonth, '01'), 'YYYYMMDD'))) AS DATE),'YYYYMMDD')) AS PERIOD,         REPLACE(TRIM(VALUE:kode_product_account::varchar), '\t', '') kode_product_account,         VALUE:account_ori_name::varchar account_ori_name,     VALUE:dc_branch_if_any::varchar BRANCH_NAME,     CASE         WHEN LOWER(VALUE:so_in_pcs::STRING) = '' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:so_in_pcs::STRING) = '-' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:so_in_pcs::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:so_in_pcs::NUMBER(38,0)     END qty,      CASE          WHEN TRIM(UPPER(VALUE:so_in_value::STRING)) = '-' THEN 0::NUMBER(38,8)          WHEN LOWER(VALUE:so_in_value::STRING) = '' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:so_in_value::STRING) = 'nan' THEN 0::NUMBER(38,8)         ELSE TO_NUMBER(REPLACE(VALUE:so_in_value::STRING, ',', ''), 38, 8)     END val,     CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \tCAST($1:process_date AS VARCHAR) PROCESS_DATE, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME,     PARTITION_DATE from DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_SELLOUT_STOCK WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_SELLOUT_STOCK)         AND LOWER(VALUE:kode_product_account::STRING) != 'nat' AND LOWER(VALUE:kode_product_account::STRING) != 'nan'        AND QTY IS NOT NULL AND QTY != 0 ),   CTE_X( NYEAR, NMONTH, PERIOD, kode_product_account, account_ori_name, BRANCH_NAME, QTY, val,        SUBACCOUNTDESC, STORE_ORI_DC, STORE_ID,         SKUCD, MATERIALCD, Mat_Conc,        PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_CODE, CUSTOMER_DISTRIBUTOR_KEY,       DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,         UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS (SELECT T1.NYEAR, T1.NMONTH, T1.PERIOD, T1.kode_product_account, T1.account_ori_name, T1.BRANCH_NAME, T1.QTY, T1.val,                 T2.SUBACCOUNTDESC, T2.STORE_ORI_DC, T2.STORE_ID,               T3.SKUCD, T3.MATERIALCD, UPPER(CONCAT(TRIM(T2.SUBACCOUNTDESC), '-', TRIM(T1.kode_product_account))) as Mat_Conc,               T4.PRODUCT_CODE, T4.PRODUCT_KEY, T4.SOURCE_SYSTEM_CODE,             T5.CUSTOMER_DISTRIBUTOR_CODE, T5.CUSTOMER_DISTRIBUTOR_KEY,              T7.DISTRIBUTOR_ID, T7.DISTRIBUTOR_KEY,             T6.AREA_KEY,               T1.UPLOAD_DATE, T1.PROCESS_DATE, T1.CREATE_TIMESTAMP,              T1.UPDATE_TIMESTAMP, T1.PROCESS_DATETIME, T1.PARTITION_DATE     FROM CTE1 T1          LEFT JOIN (SELECT SUB_ACC_DES AS SUBACCOUNTDESC, STO_ORI_DCX AS STORE_ORI_DC, STO_IDX AS STORE_ID                 FROM DEV_IDN.IDN_DMT_SFE.R_ECO_MAP_MCE                 QUALIFY ROW_NUMBER() OVER (PARTITION BY STO_ORI_DCX ORDER BY PRO_DAT DESC) = 1                ) T2     ON LOWER(CONCAT(TRIM(T1.account_ori_name), '-', TRIM(T1.BRANCH_NAME))) = LOWER(TRIM(T2.STORE_ORI_DC))      INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_MLK_MPD                 WHERE SKU != '') T3     ON TRIM(UPPER(CONCAT(TRIM(T2.SUBACCOUNTDESC), '-', TRIM(T1.kode_product_account)))) = UPPER(TRIM(T3.MATERIALCD))              INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE                  FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD                 WHERE SOU_SYS_COD = 6) T4     ON T3.SKUCD = T4.PRODUCT_CODE          INNER JOIN (SELECT CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE                FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD                 WHERE SOU_SYS_COD = 6) T5     ON LOWER(CONCAT(TRIM(T2.SUBACCOUNTDESC), '-', TRIM(T2.STORE_ID))) = LOWER(TRIM(T5.CUSTOMER_DISTRIBUTOR_CODE))           INNER JOIN (SELECT ORI_COD AS ORIGINAL_CODE, ARE_KEY AS AREA_KEY, '99999999' as temp_DISTRIBUTORCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE                  WHERE SOU_SYS_COD = 6) T6     ON UPPER(CONCAT('99999999-', TRIM(T2.SUBACCOUNTDESC), '-', TRIM(T2.STORE_ID))) = UPPER(T6.ORIGINAL_CODE)          LEFT JOIN (SELECT TO_VARCHAR(DIS_DIS) AS DISTRIBUTOR_ID, DIS_KEY AS DISTRIBUTOR_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_DIS                  WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999'                ) T7     ON TO_VARCHAR(T6.temp_DISTRIBUTORCD) = TO_VARCHAR(T7.DISTRIBUTOR_ID)       ),      CTE2(NYEAR, NMONTH, PERIOD,       QTY, val, cc,        SKUCD,       PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_CODE, CUSTOMER_DISTRIBUTOR_KEY,        DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,        UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE)      AS (SELECT NYEAR, NMONTH, PERIOD,           SUM(QTY) AS QTY, SUM(VAL) AS VAL, count(*) as cc,          SKUCD,           PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,          CUSTOMER_DISTRIBUTOR_CODE, CUSTOMER_DISTRIBUTOR_KEY,           DISTRIBUTOR_ID, DISTRIBUTOR_KEY,          AREA_KEY,          UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE           FROM CTE_X T1          GROUP BY           NYEAR, NMONTH, PERIOD,         SKUCD,        PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_CODE, CUSTOMER_DISTRIBUTOR_KEY,       DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,        UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE      ),   CTE3(PERIOD, SKUCD, ORDER_DATE) AS ( SELECT T1.PERIOD, T1.SKUCD, MAX(T2.ORDER_DATE) AS MAX_DATE FROM CTE2 T1   LEFT JOIN (SELECT SKU AS SKUCD, NMO AS NMONTH, NYE AS NYEAR,               TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                              ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC              WHERE SKU != '') T2   ON T1.SKUCD = T2.SKUCD AND TO_NUMBER(LEFT(T1.PERIOD, 6)) >= ORDER_DATE GROUP BY T1.PERIOD, T1.SKUCD )  SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,  \t\t5 AS TYP_KEY, T1.DISTRIBUTOR_KEY AS DIS_KEY,          T1.QTY AS SAL_INP_PCS,         (T1.QTY / TC1.INPCS) * TC1.INCAR AS SAL_INC_CAR,         (T1.QTY / TC1.INPCS) * TC1.INKG AS SAL_INK_INK,         (T1.QTY / TC1.INPCS) * TC1.INTON AS SAL_INT_TON,         (T1.QTY / TC1.INPCS) * TC1.IN400GR AS SAL_IN4_400,         (T1.QTY / TC1.INPCS * TC1.INCAR) * T3.RBP AS SAL_INV_VAL,         T1.VAL AS SAL_INR_REA_VAL,         T3.RBP AS PRI_RBP,         T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,         T1.UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT,          T1.CREATE_TIMESTAMP AS CRE_TIM, T1.UPDATE_TIMESTAMP AS UPD_TIM, T1.PROCESS_DATETIME AS PRO_ATE FROM CTE2 T1  LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.SKUCD = T2.SKUCD LEFT JOIN (SELECT SKU AS SKUCD, TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                                            ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE,            RBP            FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC            WHERE SKU != '') T3 ON T1.SKUCD = T3.SKUCD AND T2.ORDER_DATE = T3.ORDER_DATE  LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4_400 AS IN400GR, INC_CAR AS INCAR, INK_INK AS INKG, INP_PCS AS INPCS, INT_TON AS INTON \tFROM DEV_IDN.IDN_DMT_SFE.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD   QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_ATE DESC) = 1    ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN MATCHED THEN UPDATE SET dest.PER_KEY = source.PER_KEY, dest.PRO_KEY = source.PRO_KEY, dest.CUS_DIS_KEY = source.CUS_DIS_KEY, dest.ARE_KEY = source.ARE_KEY, dest.TYP_KEY = source.TYP_KEY, dest.DIS_KEY = source.DIS_KEY, dest.SAL_INP_PCS = source.SAL_INP_PCS, dest.SAL_INC_CAR = source.SAL_INC_CAR, dest.SAL_INK_INK = source.SAL_INK_INK, dest.SAL_INT_TON = source.SAL_INT_TON, dest.SAL_IN4_400 = source.SAL_IN4_400, dest.SAL_INV_VAL = source.SAL_INV_VAL, dest.SAL_INR_REA_VAL = source.SAL_INR_REA_VAL, dest.PRI_RBP = source.PRI_RBP, dest.SOU_SYS_COD = source.SOU_SYS_COD, dest.UPL_DAT = source.UPL_DAT, dest.PRO_DAT = source.PRO_DAT, dest.CRE_TIM = source.CRE_TIM, dest.UPD_TIM = source.UPD_TIM, dest.PRO_ATE = source.PRO_ATE WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			},
			"TIPTOP_F_BTZ_SND_TTS": {
				"type": "String",
				"defaultValue": "MERGE INTO \tDEV_IDN.IDN_DMT_SFE.F_BTZ_SND_TTS dest  \t\tUSING ( \t\t WITH  CTE1(PERIOD, STORECODE, STORENAME, BARCODE, account_grup, areacode, QTY, VAL,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS ( SELECT      CASE          WHEN LOWER(VALUE:periode::STRING) = 'nat' THEN 0::NUMBER         WHEN LOWER(VALUE:periode::STRING) = 'nan' THEN 0::NUMBER         ELSE TO_NUMBER(TO_VARCHAR(CAST((LAST_DAY(TO_DATE(VALUE:periode::VARCHAR))) AS DATE),'YYYYMMDD'))     END PERIOD,     VALUE:storecode::varchar storecode,     VALUE:storename::varchar storename,     value:barcode::varchar barcode,     value:account_grup::varchar account_grup,     value:areacode::varchar areacode,     CASE         WHEN LOWER(VALUE:sellout_pcs::STRING) = '' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:sellout_pcs::STRING) = '-' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:sellout_pcs::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:sellout_pcs::NUMBER(38,0)     END qty,      CASE          WHEN TRIM(UPPER(VALUE:value_sell_out_rp::STRING)) = '-' THEN 0::NUMBER(38,8)          WHEN LOWER(VALUE:value_sell_out_rp::STRING) = '' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:value_sell_out_rp::STRING) = 'nan' THEN 0::NUMBER(38,8)         ELSE TO_NUMBER(REPLACE(VALUE:value_sell_out_rp::STRING, ',', ''), 38, 8)     END val,     CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \tCAST($1:process_date AS VARCHAR) PROCESS_DATE, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME,     PARTITION_DATE from DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_BRICKANDCLICK_SELLOUT_STOCK WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_BRICKANDCLICK_SELLOUT_STOCK)        AND PERIOD > 0        AND LOWER(VALUE:periode::STRING) != 'nat' AND LOWER(VALUE:periode::STRING) != 'nan'       AND qty != 0 ),   CTE_X(PERIOD, STORECODE, STORENAME, BARCODE, account_grup, areacode, QTY, VAL,       SKUCD, MATERIALCD,        PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,       DISTRIBUTORCUSTOMERCD, DISTRIBUTORCD,       CUSTOMER_DISTRIBUTOR_KEY, CUSTOMER_DISTRIBUTOR_CODE,       DISTRIBUTOR_KEY,       AREA_KEY, ORIGINAL_CODE,       UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS (SELECT T1.PERIOD, T1.STORECODE, T1.STORENAME, T1.BARCODE, T1.account_grup, T1.areacode, T1.QTY, T1.VAL,                T2.SKUCD, T2.MATERIALCD,                T3.PRODUCT_CODE, T3.PRODUCT_KEY,T3.SOURCE_SYSTEM_CODE,             T4.DISTRIBUTORCUSTOMERCD, T4.DISTRIBUTORCD,             T5.CUSTOMER_DISTRIBUTOR_KEY, T5.CUSTOMER_DISTRIBUTOR_CODE,             T8.DISTRIBUTOR_KEY,             T6.AREA_KEY, T6.ORIGINAL_CODE,               T1.UPLOAD_DATE, T1.PROCESS_DATE, T1.CREATE_TIMESTAMP,              T1.UPDATE_TIMESTAMP, T1.PROCESS_DATETIME, T1.PARTITION_DATE     FROM CTE1 T1     INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_MLK_MPD                 WHERE SKU != ''               ) T2     ON UPPER(CONCAT(TRIM(T1.STORENAME),'-', TRIM(T1.BARCODE))) = UPPER(TRIM(T2.MATERIALCD))          INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE                  FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD                  WHERE SOU_SYS_COD = 6) T3     ON T2.SKUCD = T3.PRODUCT_CODE           INNER JOIN (SELECT IST AS DISTRIBUTORCUSTOMERCD, DIS AS DISTRIBUTORCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_CUS_MCD                 WHERE DIS IS NOT NULL) T4     ON UPPER(CONCAT(TRIM(T1.account_grup), '-', TRIM(T1.STORECODE))) = UPPER(T4.DISTRIBUTORCUSTOMERCD)          INNER JOIN (SELECT CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE                FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD                WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999') T5     ON LOWER(TRIM(T4.DISTRIBUTORCUSTOMERCD)) = LOWER(TRIM(T5.CUSTOMER_DISTRIBUTOR_CODE))          INNER JOIN (SELECT ORI_COD AS ORIGINAL_CODE, ARE_KEY AS AREA_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE                 WHERE SOU_SYS_COD = 6) T6     ON UPPER(CONCAT(TRIM(T4.DISTRIBUTORCD),'-', TRIM(T1.account_grup),'-', TRIM(T1.areacode))) = UPPER(T6.ORIGINAL_CODE)          INNER JOIN (SELECT DIS AS DISTRIBUTORCD, IST AS DISTRIBUTORCUSTOMERCD, STR AS DISTRIBUTORCUSTOMERDESC                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_CUS_MCD                 WHERE STR IS NOT NULL                 QUALIFY ROW_NUMBER() OVER (PARTITION BY STR ORDER BY PRO_ATE DESC)=1) T7     ON UPPER(TRIM(T1.STORENAME)) = UPPER(T7.DISTRIBUTORCUSTOMERDESC)          INNER JOIN (SELECT TO_VARCHAR(DIS_DIS) AS DISTRIBUTOR_ID, DIS_KEY AS DISTRIBUTOR_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_DIS                  WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999'                ) T8     ON TO_VARCHAR(T7.DISTRIBUTORCD) = TO_VARCHAR(T8.DISTRIBUTOR_ID)           ),     CTE2(PERIOD, QTY, VAL,      SKUCD,      PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      DISTRIBUTORCUSTOMERCD, DISTRIBUTORCD,      CUSTOMER_DISTRIBUTOR_KEY, CUSTOMER_DISTRIBUTOR_CODE,       DISTRIBUTOR_KEY,      AREA_KEY,       UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE)      AS (SELECT PERIOD, SUM(QTY), SUM(VAL),                 SKUCD,                 PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,                 DISTRIBUTORCUSTOMERCD, DISTRIBUTORCD,                 CUSTOMER_DISTRIBUTOR_KEY, CUSTOMER_DISTRIBUTOR_CODE,                  DISTRIBUTOR_KEY,                 AREA_KEY,                 UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE          FROM CTE_X T1          GROUP BY 1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19       ),       CTE3(PERIOD, SKUCD, ORDER_DATE) AS ( SELECT T1.PERIOD, T1.SKUCD, MAX(T2.ORDER_DATE) AS MAX_DATE FROM CTE2 T1   LEFT JOIN (SELECT SKU AS SKUCD, NMO AS NMONTH, NYE AS NYEAR,               TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                              ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC              WHERE SKU != '') T2   ON T1.SKUCD = T2.SKUCD AND TO_NUMBER(LEFT(T1.PERIOD, 6)) >= ORDER_DATE GROUP BY T1.PERIOD, T1.SKUCD )  SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,  \t\t5 AS TYP_KEY, T1.DISTRIBUTOR_KEY AS DIS_KEY,          T1.QTY AS SAL_INP_PCS,         (T1.QTY / TC1.INPCS) * TC1.INCAR AS SAL_INC_CAR,         (T1.QTY / TC1.INPCS) * TC1.INKG AS SAL_INK_INK,         (T1.QTY / TC1.INPCS) * TC1.INTON AS SAL_INT_TON,         (T1.QTY / TC1.INPCS) * TC1.IN400GR AS SAL_IN4_400,         (T1.QTY / TC1.INPCS) * TC1.INCAR * T3.RBP AS SAL_INV_VAL,         T1.VAL AS SAL_INR_REA_VAL,         T3.RBP AS PRI_RBP,         T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,           T1.UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT,          T1.CREATE_TIMESTAMP AS CRE_TIM, T1.UPDATE_TIMESTAMP AS UPD_TIM, T1.PROCESS_DATETIME AS PRO_ATE,         T1.PARTITION_DATE AS PAR_DAT FROM CTE2 T1  LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.SKUCD = T2.SKUCD LEFT JOIN (SELECT SKU AS SKUCD, TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                                            ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE,            RBP            FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC            WHERE SKU != '') T3 ON T1.SKUCD = T3.SKUCD AND T2.ORDER_DATE = T3.ORDER_DATE  LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4_400 AS IN400GR, INC_CAR AS INCAR, INK_INK AS INKG, INP_PCS AS INPCS, INT_TON AS INTON \tFROM DEV_IDN.IDN_DMT_SFE.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD   QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_ATE DESC) = 1   ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			},
			"KLIKIDM_F_BTZ_SND_TTS": {
				"type": "String",
				"defaultValue": "MERGE INTO \tDEV_IDN.IDN_DMT_SFE.F_BTZ_SND_TTS dest  \t\tUSING ( \t\t WITH  CTE1(NYEAR, NO_MONTH, NMONTH, PERIOD,  IDM_SKU_CODE, SHEET_NAME, QTY, UNIT,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS ( SELECT      VALUE:year::number(38,0) NYEAR,     month(to_date(REPLACE(value:month::varchar, 'Sept', 'September'), 'Mon')) no_month,     iff(len(to_varchar(no_month)) = 1,concat('0',to_varchar(no_month)),to_varchar(no_month)) as NMONTH,     TO_NUMBER(TO_VARCHAR(CAST((LAST_DAY(TO_DATE(concat(nyear, nmonth, '01'), 'YYYYMMDD'))) AS DATE),'YYYYMMDD')) AS PERIOD,        CASE          WHEN LOWER(VALUE:idm_sku_code::STRING) = 'nat' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:idm_sku_code::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE CAST((value:idm_sku_code::varchar) AS BIGINT)     END IDM_SKU_CODE,     VALUE:sheet_name::varchar sheet_name,     CASE          WHEN TRIM(LOWER(VALUE:value::STRING)) = '-' THEN 0::NUMBER(38,8)         WHEN TRIM(LOWER(VALUE:value::STRING)) = 'none' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:value::STRING) = '' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:value::STRING) = 'nan' THEN 0::NUMBER(38,8)         ELSE TO_NUMBER(REPLACE(VALUE:value::STRING, ',', ''), 38, 8)     END QTY,      CASE          WHEN LOWER(VALUE:unit::STRING) = 'nat' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:unit::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:unit::NUMBER(38,0)     END UNIT,     CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \tCAST($1:process_date AS VARCHAR) PROCESS_DATE, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME,     PARTITION_DATE from DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_KLIKIDM_SELLOUT WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM DEV_IDN.IDN_STG_ECO.S_ECO_ECOMMERCE_KLIKIDM_SELLOUT)         AND IDM_SKU_CODE > 0 AND PERIOD > 0        AND LOWER(VALUE:idm_sku_code::STRING) != 'nat' AND LOWER(VALUE:idm_sku_code::STRING) != 'nan' ),   CTE_QTY(NYEAR, NO_MONTH, NMONTH, PERIOD,  IDM_SKU_CODE, SHEET_NAME, QTY,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) as      (         Select NYEAR, NO_MONTH, NMONTH, PERIOD,  IDM_SKU_CODE, SHEET_NAME, (QTY*UNIT) AS QTY,      \t\t\tUPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE       \tfrom CTE1 T1         where UPPER(SHEET_NAME) like '%QTY%'         ),            CTE_VALUES(NYEAR, NO_MONTH, NMONTH, PERIOD,  IDM_SKU_CODE, SHEET_NAME, QTY, UNIT,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) as      (         Select * from CTE1 T1         where UPPER(SHEET_NAME) like '%VALUE%'         ),           CTE_COMBINE(NYEAR, NO_MONTH, NMONTH, PERIOD,  IDM_SKU_CODE, SHEET_NAME, QTY,       UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE, SN, VAL) as      (         Select T1.*, t2.sheet_name as SN, T2.QTY AS VAL from CTE_QTY T1         inner JOIN(SELECT * FROM CTE_VALUES) T2         ON T1.PERIOD = T2.PERIOD          AND T1.IDM_SKU_CODE = T2.IDM_SKU_CODE      ),            CTE_X(PERIOD, IDM_SKU_CODE, QTY, val,        SKUCD, MATERIALCD,        PRODUCT_CODE, PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_CODE, CUSTOMER_DISTRIBUTOR_KEY,       DISTRIBUTOR_ID, DISTRIBUTOR_KEY,      AREA_KEY,         UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS (SELECT T1.PERIOD, T1.IDM_SKU_CODE, T1.QTY, T1.val,             T2.SKUCD, T2.MATERIALCD,            T3.PRODUCT_CODE, T3.PRODUCT_KEY, T3.SOURCE_SYSTEM_CODE,            T4.CUSTOMER_DISTRIBUTOR_CODE, T4.CUSTOMER_DISTRIBUTOR_KEY,             T6.DISTRIBUTOR_ID, T6.DISTRIBUTOR_KEY,            T5.AREA_KEY,              T1.UPLOAD_DATE, T1.PROCESS_DATE, T1.CREATE_TIMESTAMP,             T1.UPDATE_TIMESTAMP, T1.PROCESS_DATETIME, T1.PARTITION_DATE     FROM CTE_COMBINE T1          INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD, DIS AS DISTRIBUTORCD                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_MLK_MPD                 WHERE SKU != '' AND DIS = '99999999') T2     ON UPPER(CONCAT('KLIK INDOMARET-', TRIM(T1.IDM_SKU_CODE))) = UPPER(TRIM(T2.MATERIALCD))              INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD                 WHERE SOU_SYS_COD = 6) T3     ON T2.SKUCD = T3.PRODUCT_CODE          INNER JOIN ( SELECT CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE, SOU_SYS_COD                  FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD                   WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999' AND CUS_DIS_COD = 'KLIK INDOMARET-KLIK IDM 001'                ) T4     ON T3.SOURCE_SYSTEM_CODE = T4.SOU_SYS_COD          INNER JOIN (SELECT ORI_COD AS ORIGINAL_CODE, ARE_KEY AS AREA_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE                  WHERE SOU_SYS_COD = 6) T5     ON UPPER(CONCAT(T2.DISTRIBUTORCD,'-KLIK INDOMARET-KLIK IDM 001')) = UPPER(T5.ORIGINAL_CODE)              INNER JOIN (SELECT TO_VARCHAR(DIS_DIS) AS DISTRIBUTOR_ID, DIS_KEY AS DISTRIBUTOR_KEY                 FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_DIS                  WHERE SOU_SYS_COD = 6 AND DIS_DIS = '99999999'                ) T6     ON TO_VARCHAR(T2.DISTRIBUTORCD) = TO_VARCHAR(T6.DISTRIBUTOR_ID)  ),      CTE2(PERIOD, QTY, val,      SKUCD,      PRODUCT_KEY, SOURCE_SYSTEM_CODE,      CUSTOMER_DISTRIBUTOR_KEY,      DISTRIBUTOR_KEY,      AREA_KEY,         UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE)      AS (SELECT PERIOD, sum(QTY), sum(val),           SKUCD,          PRODUCT_KEY, SOURCE_SYSTEM_CODE,          CUSTOMER_DISTRIBUTOR_KEY,          DISTRIBUTOR_KEY,          AREA_KEY,          UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE           FROM CTE_X T1          GROUP BY           PERIOD,          SKUCD,          PRODUCT_KEY, SOURCE_SYSTEM_CODE,          CUSTOMER_DISTRIBUTOR_KEY,          DISTRIBUTOR_KEY,          AREA_KEY,            UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE      ),    CTE3(PERIOD, SKUCD, ORDER_DATE) AS ( SELECT T1.PERIOD, T1.SKUCD, MAX(T2.ORDER_DATE) AS MAX_DATE FROM CTE2 T1   LEFT JOIN (SELECT SKU AS SKUCD, NMO AS NMONTH, NYE AS NYEAR,               TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                              ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE              FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC              WHERE SKU != '') T2   ON T1.SKUCD = T2.SKUCD AND TO_NUMBER(LEFT(T1.PERIOD, 6)) >= ORDER_DATE GROUP BY T1.PERIOD, T1.SKUCD )  SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,  \t\t5 AS TYP_KEY, T1.DISTRIBUTOR_KEY AS DIS_KEY,         T1.QTY AS SAL_INP_PCS,         (T1.QTY / TC1.INPCS) * TC1.INCAR AS SAL_INC_CAR,         (T1.QTY / TC1.INPCS) * TC1.INKG AS SAL_INK_INK,         (T1.QTY / TC1.INPCS) * TC1.INTON AS SAL_INT_TON,         (T1.QTY / TC1.INPCS) * TC1.IN400GR AS SAL_IN4_400,         (T1.QTY / TC1.INPCS * TC1.INCAR) * T3.RBP AS SAL_INV_VAL,         T1.VAL AS SAL_INR_REA_VAL,         T3.RBP AS PRI_RBP,         T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,         T1.UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT,          T1.CREATE_TIMESTAMP AS CRE_TIM, T1.UPDATE_TIMESTAMP AS UPD_TIM, T1.PROCESS_DATETIME AS PRO_ATE FROM CTE2 T1  LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.SKUCD = T2.SKUCD LEFT JOIN (SELECT SKU AS SKUCD, TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                                            ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE,            RBP            FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_PUR_PRC            WHERE SKU != '') T3 ON T1.SKUCD = T3.SKUCD AND T2.ORDER_DATE = T3.ORDER_DATE  LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4_400 AS IN400GR, INC_CAR AS INCAR, INK_INK AS INKG, INP_PCS AS INPCS, INT_TON AS INTON \tFROM DEV_IDN.IDN_DMT_SFE.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD   QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_ATE DESC) = 1    ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			}
		},
		"annotations": [
			"SFE",
			"CORE"
		],
		"lastPublishTime": "2021-12-04T22:31:08Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}