{
	"name": "Datamart_TS_MTI",
	"properties": {
		"description": "Run query at Snowflake at once. Job running based on query to load MTI and APL data loaded through sftp.",
		"activities": [
			{
				"name": "MTI_F_BTZ_SND_TTS",
				"type": "DatabricksNotebook",
				"dependsOn": [],
				"policy": {
					"timeout": "7.00:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"notebookPath": "/Users/arief.rachman1@danone.com/Snowbook",
					"baseParameters": {
						"use_case": {
							"value": "@pipeline().parameters.use_case",
							"type": "Expression"
						},
						"schema": {
							"value": "@pipeline().parameters.schema",
							"type": "Expression"
						},
						"private_key_file": {
							"value": "@variables('rsa_private_key')",
							"type": "Expression"
						},
						"credential_file": {
							"value": "@variables('db_credential')",
							"type": "Expression"
						},
						"query": {
							"value": "@variables('MTI_F_BTZ_SND_TTS')",
							"type": "Expression"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "AzureDatabricksIDNSpoke",
					"type": "LinkedServiceReference"
				}
			}
		],
		"parameters": {
			"use_case": {
				"type": "string",
				"defaultValue": "dss-sfe"
			},
			"schema": {
				"type": "string",
				"defaultValue": "IDN_DMT_SFE"
			}
		},
		"variables": {
			"rsa_private_key": {
				"type": "String",
				"defaultValue": "sf_private.key"
			},
			"db_credential": {
				"type": "String",
				"defaultValue": "sf_credential.json"
			},
			"MTI_F_BTZ_SND_TTS": {
				"type": "String",
				"defaultValue": "MERGE INTO \tDEV_IDN.IDN_DMT_SFE.F_BTZ_SND_TTS dest  \t\tUSING (  WITH  CTE1(PERIOD, BARCODE, STORECODE, SELLOUT_PCS, VALUE_SELL_OUT_RP,      UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS ( SELECT      CASE          WHEN LOWER(VALUE:periode::STRING) = 'nat' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:periode::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE TO_NUMBER(TO_VARCHAR(CAST((VALUE:periode::VARCHAR) AS DATE),'YYYYMMDD'))     END PERIOD,     CASE          WHEN LOWER(VALUE:barcode::STRING) = 'nat' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:barcode::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:barcode::NUMBER(38,0)     END barcode,     value:storecode::varchar storecode,      CASE         WHEN LOWER(VALUE:sellout_pcs::STRING) = '' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:sellout_pcs::STRING) = '-' THEN 0::NUMBER(38,0)         WHEN LOWER(VALUE:sellout_pcs::STRING) = 'nan' THEN 0::NUMBER(38,0)         ELSE VALUE:sellout_pcs::NUMBER(38,0)     END sellout_pcs,      CASE          WHEN TRIM(UPPER(VALUE:value_sell_out_rp::STRING)) LIKE 'RP%' THEN REPLACE(TRIM(REPLACE(UPPER(VALUE:value_sell_out_rp::STRING),'RP')),',')::NUMBER(38,0)          WHEN LOWER(VALUE:value_sell_out_rp::STRING) = '' THEN 0::NUMBER(38,8)         WHEN LOWER(VALUE:value_sell_out_rp::STRING) = 'nan' THEN 0::NUMBER(38,8)         ELSE TO_NUMBER(REPLACE(VALUE:value_sell_out_rp::STRING, ',', ''), 38, 8)     END value_sell_out_rp,     CAST($1:process_datetime AS TIMESTAMP_NTZ) UPLOAD_DATE, \tCAST($1:process_date AS VARCHAR) PROCESS_DATE, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) CREATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) UPDATE_TIMESTAMP, \tCAST($1:process_datetime AS TIMESTAMP_NTZ) PROCESS_DATETIME,     PARTITION_DATE from DEV_IDN.IDN_STG_MTI.S_MTI_MTI_SELLOUT_STOCK WHERE PARTITION_DATE = (SELECT MAX(PARTITION_DATE) FROM DEV_IDN.IDN_STG_MTI.S_MTI_MTI_SELLOUT_STOCK)        AND sellout_pcs != 0 AND barcode > 0 AND PERIOD > 0        AND LOWER(VALUE:periode::STRING) != 'nat' AND LOWER(VALUE:periode::STRING) != 'nan'  ),   CTE_X(PERIOD, BARCODE, STORECODE, SELLOUT_PCS, VALUE_SELL_OUT_RP, SKUCD, MATERIALCD, PRODUCT_CODE, PRODUCT_KEY,       CUSTOMER_DISTRIBUTOR_CODE,       CUSTOMER_DISTRIBUTOR_KEY,      AREA_KEY, SOURCE_SYSTEM_CODE,        UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE) AS (SELECT T1.PERIOD, T1.BARCODE, T1.STORECODE, T1.SELLOUT_PCS, T1.VALUE_SELL_OUT_RP, T2.SKUCD, T2.MATERIALCD, T3.PRODUCT_CODE, T3.PRODUCT_KEY,             T4.CUSTOMER_DISTRIBUTOR_CODE,              T4.CUSTOMER_DISTRIBUTOR_KEY,             T6.AREA_KEY,  T3.SOURCE_SYSTEM_CODE,             T1.UPLOAD_DATE, T1.PROCESS_DATE, T1.CREATE_TIMESTAMP,              T1.UPDATE_TIMESTAMP, T1.PROCESS_DATETIME, T1.PARTITION_DATE     FROM CTE1 T1     INNER JOIN (SELECT SKU AS SKUCD, MAT AS MATERIALCD                 FROM DEV_IDN.IDN_DWH.R_BTZ_DIS_MPM                 WHERE SKU != ''               ) T2     ON CONCAT('FT-', T1.BARCODE) = T2.MATERIALCD     INNER JOIN (SELECT PRO_COD AS PRODUCT_CODE, PRO_KEY AS PRODUCT_KEY, SOU_SYS_COD AS SOURCE_SYSTEM_CODE                  FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_IVT_PRD                  WHERE SOU_SYS_COD = 6) T3     ON T2.SKUCD = T3.PRODUCT_CODE              INNER JOIN (SELECT CUS_DIS_KEY AS CUSTOMER_DISTRIBUTOR_KEY, CUS_DIS_COD AS CUSTOMER_DISTRIBUTOR_CODE                FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_SND_CSD                  WHERE SOU_SYS_COD = 6) T4     ON T1.STORECODE = T4.CUSTOMER_DISTRIBUTOR_CODE           INNER JOIN (SELECT STO_COD AS STORECODE, DIS_COD AS DISTRIBUTORCD, DIS_ARE_COD AS DISTRIBUTORAREACD                 FROM DEV_IDN.IDN_DWH.R_BTZ_DIS_MAM                 ) T5     ON T1.STORECODE = T5.STORECODE           INNER JOIN (SELECT ORI_COD AS ORIGINAL_CODE, ARE_KEY AS AREA_KEY                FROM DEV_IDN.IDN_DMT_SFE.R_BTZ_GEO_ARE                 WHERE SOU_SYS_COD = 6               ) T6     ON LOWER(CONCAT(T5.DISTRIBUTORCD, '-', TRIM(T5.DISTRIBUTORAREACD))) = TRIM(LOWER(T6.ORIGINAL_CODE)) ),  CTE2(PERIOD, SELLOUT_PCS, VALUE_SELL_OUT_RP, SKUCD, PRODUCT_KEY,       CUSTOMER_DISTRIBUTOR_KEY,      AREA_KEY, SOURCE_SYSTEM_CODE,        UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE)      AS (SELECT PERIOD, SUM(SELLOUT_PCS) AS SELLOUT_PCS, SUM(VALUE_SELL_OUT_RP) AS VALUE_SELL_OUT_RP,                  SKUCD, PRODUCT_KEY, CUSTOMER_DISTRIBUTOR_KEY, AREA_KEY, SOURCE_SYSTEM_CODE,                   UPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP, PROCESS_DATETIME, PARTITION_DATE           FROM CTE_X T1          GROUP BY PERIOD, SKUCD, PRODUCT_KEY, CUSTOMER_DISTRIBUTOR_KEY, AREA_KEY, SOURCE_SYSTEM_CODE,           \t\tUPLOAD_DATE, PROCESS_DATE, CREATE_TIMESTAMP, UPDATE_TIMESTAMP,                  PROCESS_DATETIME, PARTITION_DATE      ),             CTE3(PERIOD, SKUCD, ORDER_DATE) AS ( SELECT T1.PERIOD, T1.SKUCD, MAX(T2.ORDER_DATE) AS MAX_DATE FROM CTE2 T1   LEFT JOIN (SELECT SKU AS SKUCD, NMO AS NMONTH, NYE AS NYEAR,               TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                              ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE              FROM DEV_IDN.IDN_DWH.R_BTZ_PUR_PRC              WHERE DIS = '99999999' AND SKU != '') T2   ON T1.SKUCD = T2.SKUCD AND TO_NUMBER(LEFT(T1.PERIOD, 6)) >= ORDER_DATE GROUP BY T1.PERIOD, T1.SKUCD )  SELECT T1.PERIOD AS PER_KEY, T1.PRODUCT_KEY AS PRO_KEY, T1.CUSTOMER_DISTRIBUTOR_KEY AS CUS_DIS_KEY, T1.AREA_KEY AS ARE_KEY,  \t\t7 AS TYP_KEY, 1493 AS DIS_KEY,          T1.SELLOUT_PCS AS SAL_INP_PCS,         (T1.SELLOUT_PCS / TC1.INPCS) * TC1.INCAR AS SAL_INC_CAR,         (T1.SELLOUT_PCS / TC1.INPCS) * TC1.INKG AS SAL_INK_INK,         (T1.SELLOUT_PCS / TC1.INPCS) * TC1.INTON AS SAL_INT_TON,         (T1.SELLOUT_PCS / TC1.INPCS) * TC1.IN400GR AS SAL_IN4_400,         (T1.SELLOUT_PCS / TC1.INPCS) * TC1.INCAR * T3.RBP AS SAL_INV_VAL,         T1.VALUE_SELL_OUT_RP AS SAL_INR_REA_VAL,         T3.RBP AS PRI_RBP,         T1.SOURCE_SYSTEM_CODE AS SOU_SYS_COD,           T1.UPLOAD_DATE AS UPL_DAT, T1.PROCESS_DATE AS PRO_DAT,          T1.CREATE_TIMESTAMP AS CRE_TIM, T1.UPDATE_TIMESTAMP AS UPD_TIM, T1.PROCESS_DATETIME AS PRO_ATE,         T1.PARTITION_DATE AS PAR_DAT FROM CTE2 T1  LEFT JOIN (SELECT * FROM CTE3) T2 ON T1.SKUCD = T2.SKUCD LEFT JOIN (SELECT SKU AS SKUCD, TO_NUMBER(CASE WHEN NMO::INTEGER < 10 THEN (NYE::STRING || '0' || NMO::STRING)                                            ELSE NYE::STRING || NMO::STRING END) AS ORDER_DATE,            RBP            FROM DEV_IDN.IDN_DWH.R_BTZ_PUR_PRC            WHERE DIS = '99999999' AND SKU != '') T3 ON T1.SKUCD = T3.SKUCD AND T2.ORDER_DATE = T3.ORDER_DATE  LEFT JOIN ( \tSELECT SKU AS SKUCD, IN4_400 AS IN400GR, INC_CAR AS INCAR, INK_INK AS INKG, INP_PCS AS INPCS, INT_TON AS INTON \tFROM DEV_IDN.IDN_DWH.R_BTZ_OTH_UOM) TC1  ON T1.SKUCD = TC1.SKUCD   QUALIFY ROW_NUMBER() OVER (PARTITION BY PER_KEY, PRO_KEY, CUS_DIS_KEY, ARE_KEY, TYP_KEY, DIS_KEY ORDER BY PRO_ATE DESC) = 1   ) SOURCE ON dest.PER_KEY = source.PER_KEY AND dest.PRO_KEY = source.PRO_KEY AND dest.CUS_DIS_KEY = source.CUS_DIS_KEY AND dest.ARE_KEY = source.ARE_KEY AND dest.TYP_KEY = source.TYP_KEY AND dest.DIS_KEY = source.DIS_KEY AND  dest.SOU_SYS_COD = source.SOU_SYS_COD WHEN MATCHED THEN UPDATE SET dest.PER_KEY = source.PER_KEY, dest.PRO_KEY = source.PRO_KEY, dest.CUS_DIS_KEY = source.CUS_DIS_KEY, dest.ARE_KEY = source.ARE_KEY, dest.TYP_KEY = source.TYP_KEY, dest.DIS_KEY = source.DIS_KEY, dest.SAL_INP_PCS = source.SAL_INP_PCS, dest.SAL_INC_CAR = source.SAL_INC_CAR, dest.SAL_INK_INK = source.SAL_INK_INK, dest.SAL_INT_TON = source.SAL_INT_TON, dest.SAL_IN4_400 = source.SAL_IN4_400, dest.SAL_INV_VAL = source.SAL_INV_VAL, dest.SAL_INR_REA_VAL = source.SAL_INR_REA_VAL, dest.PRI_RBP = source.PRI_RBP, dest.SOU_SYS_COD = source.SOU_SYS_COD, dest.UPL_DAT = source.UPL_DAT, dest.PRO_DAT = source.PRO_DAT, dest.CRE_TIM = source.CRE_TIM, dest.UPD_TIM = source.UPD_TIM, dest.PRO_ATE = source.PRO_ATE WHEN NOT MATCHED THEN  INSERT( dest.PER_KEY, dest.PRO_KEY, dest.CUS_DIS_KEY, dest.ARE_KEY, dest.TYP_KEY, dest.DIS_KEY, dest.SAL_INP_PCS, dest.SAL_INC_CAR, dest.SAL_INK_INK, dest.SAL_INT_TON, dest.SAL_IN4_400, dest.SAL_INV_VAL, dest.SAL_INR_REA_VAL, dest.PRI_RBP, dest.SOU_SYS_COD, dest.UPL_DAT, dest.PRO_DAT, dest.CRE_TIM, dest.UPD_TIM, dest.PRO_ATE) VALUES ( source.PER_KEY, source.PRO_KEY, source.CUS_DIS_KEY, source.ARE_KEY, source.TYP_KEY, source.DIS_KEY, source.SAL_INP_PCS, source.SAL_INC_CAR, source.SAL_INK_INK, source.SAL_INT_TON, source.SAL_IN4_400, source.SAL_INV_VAL, source.SAL_INR_REA_VAL, source.PRI_RBP, source.SOU_SYS_COD, source.UPL_DAT, source.PRO_DAT, source.CRE_TIM, source.UPD_TIM, source.PRO_ATE);"
			}
		},
		"annotations": [
			"SFE",
			"CORE"
		],
		"lastPublishTime": "2021-12-04T22:31:08Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}